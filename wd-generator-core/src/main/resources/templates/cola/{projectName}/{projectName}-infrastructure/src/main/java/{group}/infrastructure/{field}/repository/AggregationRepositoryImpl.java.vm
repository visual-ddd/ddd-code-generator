#parse("templates/Aggregation.vm")
package $RepositoryImplPackagePath;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import java.util.List;
import javax.annotation.Resource;
import org.springframework.util.Assert;
import ${AGGREGATION_PACKAGE_PATH}.${AGGREGATION_CLASS_NAME};
import ${AGGREGATION_PACKAGE_PATH}.${AGGREGATION_CLASS_NAME}Repository;
import ${DOPackagePath}.${AGGREGATION_CLASS_NAME}DO;
import ${MapperPackagePath}.${AGGREGATION_CLASS_NAME}Mapper;
import ${InfraConvertPackagePath}.${AGGREGATION_CLASS_NAME}DoConvert;

#comment("${AGGREGATION_CLASS_DESCRIPTION}存储接口实现类")
@Slf4j
@Component
public class ${AGGREGATION_CLASS_NAME}RepositoryImpl implements ${AGGREGATION_CLASS_NAME}Repository {

    @Resource
    private ${AGGREGATION_CLASS_NAME}Mapper ${AGGREGATION_CLASS_NAME_FIRST_LOWER}Mapper;

    @Override
    public ${AGGREGATION_CLASS_NAME} save(${AGGREGATION_CLASS_NAME} ${AGGREGATION_CLASS_NAME_FIRST_LOWER}) {
        ${AGGREGATION_CLASS_NAME}DO ${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO = ${AGGREGATION_CLASS_NAME}DoConvert.INSTANCE.dto2Do(${AGGREGATION_CLASS_NAME_FIRST_LOWER});
        int insert = ${AGGREGATION_CLASS_NAME_FIRST_LOWER}Mapper.insert(${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO);
        Assert.isTrue(insert == 1, "插入数据库异常，请联系管理员");
        return ${AGGREGATION_CLASS_NAME}DoConvert.INSTANCE.do2Dto(${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO);
    }

    @Override
    public ${AGGREGATION_CLASS_NAME} update(${AGGREGATION_CLASS_NAME} ${AGGREGATION_CLASS_NAME_FIRST_LOWER}) {
        ${AGGREGATION_CLASS_NAME}DO ${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO = ${AGGREGATION_CLASS_NAME}DoConvert.INSTANCE.dto2Do(${AGGREGATION_CLASS_NAME_FIRST_LOWER});
        int update = ${AGGREGATION_CLASS_NAME_FIRST_LOWER}Mapper.updateById(${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO);
        Assert.isTrue(update == 1, "更新数据库异常，请联系管理员");
        return ${AGGREGATION_CLASS_NAME}DoConvert.INSTANCE.do2Dto(${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO);
    }

    @Override
    public void remove(${AGGREGATION_CLASS_NAME} ${AGGREGATION_CLASS_NAME_FIRST_LOWER}) {
        ${AGGREGATION_CLASS_NAME}DO ${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO = ${AGGREGATION_CLASS_NAME}DoConvert.INSTANCE.dto2Do(${AGGREGATION_CLASS_NAME_FIRST_LOWER});
        ${AGGREGATION_CLASS_NAME_FIRST_LOWER}Mapper.deleteById(${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO.getId());
    }

    @Override
    public ${AGGREGATION_CLASS_NAME} find(Long id) {
        ${AGGREGATION_CLASS_NAME}DO ${AGGREGATION_CLASS_NAME_FIRST_LOWER} = ${AGGREGATION_CLASS_NAME_FIRST_LOWER}Mapper.selectById(id);
        return ${AGGREGATION_CLASS_NAME}DoConvert.INSTANCE.do2Dto(${AGGREGATION_CLASS_NAME_FIRST_LOWER});
    }
}
