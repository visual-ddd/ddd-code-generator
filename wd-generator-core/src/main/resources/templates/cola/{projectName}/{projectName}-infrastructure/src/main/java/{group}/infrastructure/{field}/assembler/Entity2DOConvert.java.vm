#parse("templates/ClassFunction.vm")
package ${IMPORT_PACKAGE_MAP.get("${OBJECT_MAPPER_SOURCE_OBJECT}2${OBJECT_MAPPER_TARGET_OBJECT}Convert")};

import ${PROJECT_PACKAGE}.infrastructure.BaseConvert;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Mappings;
import org.mapstruct.factory.Mappers;
import ${IMPORT_PACKAGE_MAP.get(${OBJECT_MAPPER_SOURCE_OBJECT})}.${OBJECT_MAPPER_SOURCE_OBJECT};
import ${IMPORT_PACKAGE_MAP.get(${OBJECT_MAPPER_TARGET_OBJECT})}.${OBJECT_MAPPER_TARGET_OBJECT};
#foreach($enum in ${DOMAIN_ENUM_LIST})
#if(${enum.getParentNode().root.name} == ${OBJECT_MAPPER_SOURCE_OBJECT})
import ${IMPORT_PACKAGE_MAP.get("${enum.name}Converter")}.${enum.name}Converter;
#end
#end
#foreach($valueObject in ${DOMAIN_VALUE_OBJECT_LIST})
#if(${valueObject.getParentNode().root.name} == ${OBJECT_MAPPER_SOURCE_OBJECT})
import ${IMPORT_PACKAGE_MAP.get("${valueObject.name}Converter")}.${valueObject.name}Converter;
#end
#end
#foreach($entity in ${DOMAIN_ENTITY_LIST})
#if(${entity.getParentNode().root.name} == ${OBJECT_MAPPER_SOURCE_OBJECT})
import ${IMPORT_PACKAGE_MAP.get("${entity.name}Converter")}.${entity.name}Converter;
#end
#end

@Mapper(uses = {
    #foreach($enum in ${DOMAIN_ENUM_LIST})
    #if(${enum.getParentNode().root.name} == ${OBJECT_MAPPER_SOURCE_OBJECT})
        ${enum.name}Converter.class,
    #end
    #end
    #foreach($valueObject in ${DOMAIN_VALUE_OBJECT_LIST})
    #if(${valueObject.getParentNode().root.name} == ${OBJECT_MAPPER_SOURCE_OBJECT})
        ${valueObject.name}Converter.class,
    #end
    #end
    #foreach($entity in ${DOMAIN_ENTITY_LIST})
    #if(${entity.getParentNode().root.name} == ${OBJECT_MAPPER_SOURCE_OBJECT})
        ${entity.name}Converter.class,
    #end
    #end
})
public interface ${OBJECT_MAPPER_SOURCE_OBJECT}2${OBJECT_MAPPER_TARGET_OBJECT}Convert extends BaseConvert<${OBJECT_MAPPER_SOURCE_OBJECT}, ${OBJECT_MAPPER_TARGET_OBJECT}> {

    ${OBJECT_MAPPER_SOURCE_OBJECT}2${OBJECT_MAPPER_TARGET_OBJECT}Convert INSTANCE = Mappers.getMapper(${OBJECT_MAPPER_SOURCE_OBJECT}2${OBJECT_MAPPER_TARGET_OBJECT}Convert.class);

    @Mappings({
    #foreach ($mapper in ${OBJECT_MAPPER_OBJECT_FIELD_LIST})
        #if(${mapper.sourceField} && ${mapper.targetField})
            @Mapping(source = "${mapper.sourceField}", target = "${mapper.targetField}"),
        #end
    #end
    })
    @Override
    ${OBJECT_MAPPER_TARGET_OBJECT} dto2Do(${OBJECT_MAPPER_SOURCE_OBJECT} dto);

    @Mappings({
    #foreach ($mapper in ${OBJECT_MAPPER_OBJECT_FIELD_LIST})
        #if(${mapper.sourceField} && ${mapper.targetField})
            @Mapping(source = "${mapper.targetField}", target = "${mapper.sourceField}"),
        #end
    #end
    })
    @Override
    ${OBJECT_MAPPER_SOURCE_OBJECT} do2Dto(${OBJECT_MAPPER_TARGET_OBJECT} d);
}
