#parse("templates/ClassFunction.vm")
#set($doId = ${OBJECT_MAPPER_TARGET_OBJECT_ID})
#set($doClassName = ${IMPORT_PACKAGE_MAP.get(${doId}).elementNode.name})
#set($doMapperClassName = ${IMPORT_PACKAGE_MAP.get(${doId}).elementNode.dataObjectMapperName})
#set($aggregationId = ${IMPORT_PACKAGE_MAP.get("mapper::entity::${doId}")})
#set($aggregationClass = ${IMPORT_PACKAGE_MAP.get(${aggregationId}).elementNode.name})
#set($AGGREGATION_CLASS_NAME_FIRST_LOWER = "${CASE_FORMAT_LOWER_CAMEL.convert(${aggregationClass})}")
#set($convertClassName = "${OBJECT_MAPPER_SOURCE_OBJECT}2${OBJECT_MAPPER_TARGET_OBJECT}Convert")
package ${IMPORT_PACKAGE_MAP.get(${OBJECT_MAPPER_ID}).get("${aggregationClass}RepositoryImpl")};

import com.wakedata.common.core.exception.BizException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import java.util.*;
import java.math.*;
import javax.annotation.Resource;
import org.springframework.util.Assert;
import ${IMPORT_PACKAGE_MAP.get(${aggregationId}).get("${aggregationClass}")}.${aggregationClass};
import ${IMPORT_PACKAGE_MAP.get(${aggregationId}).get("${aggregationClass}Repository")}.${aggregationClass}Repository;
import ${IMPORT_PACKAGE_MAP.get(${doId}).get("${doClassName}")}.${doClassName};
import ${IMPORT_PACKAGE_MAP.get(${doId}).get("${doMapperClassName}")}.${doMapperClassName};
import ${IMPORT_PACKAGE_MAP.get(${OBJECT_MAPPER_ID}).get("${convertClassName}")}.${convertClassName};

#comment("${OBJECT_MAPPER_OBJECT_AGGREGATION}-聚合仓储实现类")
@Slf4j
@Component
public class ${aggregationClass}RepositoryImpl implements ${aggregationClass}Repository {

    @Resource
    private ${doMapperClassName} ${CASE_FORMAT_LOWER_CAMEL.convert(${doMapperClassName})};

    @Override
    public ${aggregationClass} save(${aggregationClass} ${AGGREGATION_CLASS_NAME_FIRST_LOWER}) {
        ${doClassName} ${CASE_FORMAT_LOWER_CAMEL.convert(${doClassName})} = ${convertClassName}.INSTANCE.dto2Do(${AGGREGATION_CLASS_NAME_FIRST_LOWER});
        int insert = ${CASE_FORMAT_LOWER_CAMEL.convert(${doMapperClassName})}.insert(${CASE_FORMAT_LOWER_CAMEL.convert(${doClassName})});
        Assert.isTrue(insert == 1, "插入数据库异常，请联系管理员");
        return ${convertClassName}.INSTANCE.do2Dto(${CASE_FORMAT_LOWER_CAMEL.convert(${doClassName})});
    }

    @Override
    public ${aggregationClass} update(${aggregationClass} ${AGGREGATION_CLASS_NAME_FIRST_LOWER}) {
        ${doClassName} ${CASE_FORMAT_LOWER_CAMEL.convert(${doClassName})} = ${convertClassName}.INSTANCE.dto2Do(${AGGREGATION_CLASS_NAME_FIRST_LOWER});
        int update = ${CASE_FORMAT_LOWER_CAMEL.convert(${doMapperClassName})}.updateById(${CASE_FORMAT_LOWER_CAMEL.convert(${doClassName})});
        Assert.isTrue(update == 1, "更新数据库异常，请联系管理员");
        return ${convertClassName}.INSTANCE.do2Dto(${CASE_FORMAT_LOWER_CAMEL.convert(${doClassName})});
    }

    @Override
    public void remove(${aggregationClass} ${AGGREGATION_CLASS_NAME_FIRST_LOWER}) {
        ${doClassName} ${CASE_FORMAT_LOWER_CAMEL.convert(${doClassName})} = ${convertClassName}.INSTANCE.dto2Do(${AGGREGATION_CLASS_NAME_FIRST_LOWER});
        ${CASE_FORMAT_LOWER_CAMEL.convert(${doMapperClassName})}.deleteById(${CASE_FORMAT_LOWER_CAMEL.convert(${doClassName})}.getId());
    }

    @Override
    public ${aggregationClass} find(Long id) {
        ${doClassName} result = ${CASE_FORMAT_LOWER_CAMEL.convert(${doMapperClassName})}.selectById(id);
        if (result == null) throw new BizException("id不存在!");
        return ${convertClassName}.INSTANCE.do2Dto(result);
    }
}
