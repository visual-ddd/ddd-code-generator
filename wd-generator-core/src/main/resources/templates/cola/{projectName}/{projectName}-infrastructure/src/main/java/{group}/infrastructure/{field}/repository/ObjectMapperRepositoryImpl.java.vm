#parse("templates/ClassFunction.vm")
#set($aggregationClass = ${IMPORT_PACKAGE_MAP.get("mapper::${OBJECT_MAPPER_TARGET_OBJECT}")})
#set($AGGREGATION_CLASS_NAME_FIRST_LOWER = "${CASE_FORMAT_LOWER_CAMEL.convert(${aggregationClass})}")
package ${IMPORT_PACKAGE_MAP.get("${aggregationClass}RepositoryImpl")};

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import java.util.List;
import javax.annotation.Resource;
import org.springframework.util.Assert;
import ${IMPORT_PACKAGE_MAP.get("${aggregationClass}Repository")}.${aggregationClass}Repository;
import ${IMPORT_PACKAGE_MAP.get("${aggregationClass}DO")}.${aggregationClass}DO;
import ${IMPORT_PACKAGE_MAP.get("${aggregationClass}")}.${aggregationClass};
import ${IMPORT_PACKAGE_MAP.get("${aggregationClass}Mapper")}.${aggregationClass}Mapper;
import ${IMPORT_PACKAGE_MAP.get("${aggregationClass}RepositoryImpl")}.${aggregationClass}RepositoryImpl;
import ${IMPORT_PACKAGE_MAP.get("${OBJECT_MAPPER_CLASS_NAME}")}.${OBJECT_MAPPER_CLASS_NAME};

#comment("${OBJECT_MAPPER_CLASS_DESCRIPTION}存储接口实现类")
@Slf4j
@Component
public class ${aggregationClass}RepositoryImpl implements ${aggregationClass}Repository {

    @Resource
    private ${aggregationClass}Mapper ${AGGREGATION_CLASS_NAME_FIRST_LOWER}Mapper;

    @Override
    public ${aggregationClass} save(${aggregationClass} ${AGGREGATION_CLASS_NAME_FIRST_LOWER}) {
        ${aggregationClass}DO ${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO = ${OBJECT_MAPPER_CLASS_NAME}.INSTANCE.dto2Do(${AGGREGATION_CLASS_NAME_FIRST_LOWER});
        int insert = ${AGGREGATION_CLASS_NAME_FIRST_LOWER}Mapper.insert(${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO);
        Assert.isTrue(insert == 1, "插入数据库异常，请联系管理员");
        return ${OBJECT_MAPPER_CLASS_NAME}.INSTANCE.do2Dto(${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO);
    }

    @Override
    public ${aggregationClass} update(${aggregationClass} ${AGGREGATION_CLASS_NAME_FIRST_LOWER}) {
        ${aggregationClass}DO ${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO = ${OBJECT_MAPPER_CLASS_NAME}.INSTANCE.dto2Do(${AGGREGATION_CLASS_NAME_FIRST_LOWER});
        int update = ${AGGREGATION_CLASS_NAME_FIRST_LOWER}Mapper.updateById(${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO);
        Assert.isTrue(update == 1, "更新数据库异常，请联系管理员");
        return ${OBJECT_MAPPER_CLASS_NAME}.INSTANCE.do2Dto(${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO);
    }

    @Override
    public void remove(${aggregationClass} ${AGGREGATION_CLASS_NAME_FIRST_LOWER}) {
        ${aggregationClass}DO ${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO = ${OBJECT_MAPPER_CLASS_NAME}.INSTANCE.dto2Do(${AGGREGATION_CLASS_NAME_FIRST_LOWER});
        ${AGGREGATION_CLASS_NAME_FIRST_LOWER}Mapper.deleteById(${AGGREGATION_CLASS_NAME_FIRST_LOWER}DO.getId());
    }

    @Override
    public ${aggregationClass} find(Long id) {
        ${aggregationClass}DO ${AGGREGATION_CLASS_NAME_FIRST_LOWER} = ${AGGREGATION_CLASS_NAME_FIRST_LOWER}Mapper.selectById(id);
        return ${OBJECT_MAPPER_CLASS_NAME}.INSTANCE.do2Dto(${AGGREGATION_CLASS_NAME_FIRST_LOWER});
    }
}
