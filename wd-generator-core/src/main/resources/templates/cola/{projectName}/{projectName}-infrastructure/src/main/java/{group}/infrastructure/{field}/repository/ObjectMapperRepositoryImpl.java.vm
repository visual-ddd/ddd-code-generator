#parse("templates/ClassFunction.vm")
package ${IMPORT_PACKAGE_MAP.get("${OBJECT_MAPPER_CLASS_NAME}RepositoryImpl")};

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import java.util.List;
import javax.annotation.Resource;
import org.springframework.util.Assert;
import ${IMPORT_PACKAGE_MAP.get(${OBJECT_MAPPER_CLASS_NAME})}.${OBJECT_MAPPER_CLASS_NAME};
import ${IMPORT_PACKAGE_MAP.get("${OBJECT_MAPPER_CLASS_NAME}Repository")}.${OBJECT_MAPPER_CLASS_NAME}Repository;
import ${IMPORT_PACKAGE_MAP.get("${OBJECT_MAPPER_CLASS_NAME}DO")}.${OBJECT_MAPPER_CLASS_NAME}DO;
import ${IMPORT_PACKAGE_MAP.get("${OBJECT_MAPPER_CLASS_NAME}Mapper")}.${OBJECT_MAPPER_CLASS_NAME}Mapper;
import ${IMPORT_PACKAGE_MAP.get("${OBJECT_MAPPER_CLASS_NAME}2DoConvert")}.${OBJECT_MAPPER_CLASS_NAME}2DoConvert;

#set($OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER = "${CASE_FORMAT_LOWER_CAMEL.convert(${OBJECT_MAPPER_CLASS_NAME})}")
#comment("${OBJECT_MAPPER_CLASS_DESCRIPTION}存储接口实现类")
@Slf4j
@Component
public class ${OBJECT_MAPPER_CLASS_NAME}RepositoryImpl implements ${OBJECT_MAPPER_CLASS_NAME}Repository {

    @Resource
    private ${OBJECT_MAPPER_CLASS_NAME}Mapper ${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}Mapper;

    @Override
    public ${OBJECT_MAPPER_CLASS_NAME} save(${OBJECT_MAPPER_CLASS_NAME} ${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}) {
        ${OBJECT_MAPPER_CLASS_NAME}DO ${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}DO = ${OBJECT_MAPPER_CLASS_NAME}2DoConvert.INSTANCE.dto2Do(${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER});
        int insert = ${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}Mapper.insert(${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}DO);
        Assert.isTrue(insert == 1, "插入数据库异常，请联系管理员");
        return ${OBJECT_MAPPER_CLASS_NAME}2DoConvert.INSTANCE.do2Dto(${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}DO);
    }

    @Override
    public ${OBJECT_MAPPER_CLASS_NAME} update(${OBJECT_MAPPER_CLASS_NAME} ${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}) {
        ${OBJECT_MAPPER_CLASS_NAME}DO ${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}DO = ${OBJECT_MAPPER_CLASS_NAME}2DoConvert.INSTANCE.dto2Do(${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER});
        int update = ${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}Mapper.updateById(${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}DO);
        Assert.isTrue(update == 1, "更新数据库异常，请联系管理员");
        return ${OBJECT_MAPPER_CLASS_NAME}2DoConvert.INSTANCE.do2Dto(${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}DO);
    }

    @Override
    public void remove(${OBJECT_MAPPER_CLASS_NAME} ${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}) {
        ${OBJECT_MAPPER_CLASS_NAME}DO ${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}DO = ${OBJECT_MAPPER_CLASS_NAME}2DoConvert.INSTANCE.dto2Do(${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER});
        ${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}Mapper.deleteById(${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}DO.getId());
    }

    @Override
    public ${OBJECT_MAPPER_CLASS_NAME} find(Long id) {
        ${OBJECT_MAPPER_CLASS_NAME}DO ${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER} = ${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER}Mapper.selectById(id);
        return ${OBJECT_MAPPER_CLASS_NAME}2DoConvert.INSTANCE.do2Dto(${OBJECT_MAPPER_CLASS_NAME_FIRST_LOWER});
    }
}
