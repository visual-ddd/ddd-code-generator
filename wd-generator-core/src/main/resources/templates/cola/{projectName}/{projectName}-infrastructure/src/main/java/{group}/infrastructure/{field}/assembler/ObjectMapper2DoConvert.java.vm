#parse("templates/ObjectMapper.vm")
package ${IMPORT_PACKAGE_MAP.get("${OBJECT_MAPPER_CLASS_NAME}2DoConvert")};

import ${PROJECT_PACKAGE}.infrastructure.BaseConvert;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Mappings;
import org.mapstruct.factory.Mappers;
import ${IMPORT_PACKAGE_MAP.get(${OBJECT_MAPPER_SOURCE_OBJECT})}.${OBJECT_MAPPER_SOURCE_OBJECT};
import ${IMPORT_PACKAGE_MAP.get(${OBJECT_MAPPER_TARGET_OBJECT})}.${OBJECT_MAPPER_TARGET_OBJECT};
#dependencyEnumConverter()

#comment("${OBJECT_MAPPER_CLASS_NAME}和DO转换器")
##@Mapper(uses = {
##    #foreach($aggregationEnum in ${AGGREGATION_ENUM_LIST})
##        ${aggregationEnum.name}Converter.class,
##    #end
##})
public interface ${OBJECT_MAPPER_CLASS_NAME}2DoConvert extends BaseConvert<${OBJECT_MAPPER_SOURCE_OBJECT}, ${OBJECT_MAPPER_TARGET_OBJECT}> {


    ${OBJECT_MAPPER_CLASS_NAME}2DoConvert INSTANCE = Mappers.getMapper(${OBJECT_MAPPER_CLASS_NAME}2DoConvert.class);

    #foreach ($mapper in ${OBJECT_MAPPER_OBJECT_FIELD_LIST})
    @Mappings({
        #if(${mapper.sourceField} && ${mapper.targetField})
            @Mapping(source = "${mapper.sourceField}", target = "${mapper.targetField}")
        #end
    })
    @Override
    ${OBJECT_MAPPER_TARGET_OBJECT} dto2Do(${OBJECT_MAPPER_SOURCE_OBJECT} dto);

    @Mappings({
        #if(${mapper.sourceField} && ${mapper.targetField})
            @Mapping(source = "${mapper.targetField}", target = "${mapper.sourceField}")
        #end
    })
    @Override
    ${OBJECT_MAPPER_SOURCE_OBJECT} do2Dto(${OBJECT_MAPPER_TARGET_OBJECT} d);
#end

}
