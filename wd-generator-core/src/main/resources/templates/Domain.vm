## 引入公共类方法
#parse("templates/ClassFunction.vm")
## 依赖
#macro(importDomainQuery)
#foreach ($query in ${DOMAIN_QUERY_LIST})
import ${IMPORT_PACKAGE_MAP.get(${query.identity}).get("${query.name}")}.${query.name};
#end
#end
#macro(importDomainCmdDTO)
#foreach ($cmd in ${DOMAIN_CMD_LIST})
import ${IMPORT_PACKAGE_MAP.get(${cmd.identity}).get("${cmd.cmdDTOName}")}.${cmd.cmdDTOName};
#end
#end
#macro(importDomainDTO)
#foreach ($dto in ${DOMAIN_DTO_LIST})
import ${IMPORT_PACKAGE_MAP.get(${dto.identity}).get("${dto.name}")}.${dto.name};
#end
#end
#macro(importDomainApplication)
import ${IMPORT_PACKAGE_MAP.get(${DOMAIN_ID}).get("${DOMAIN_CLASS_NAME}Application")}.${DOMAIN_CLASS_NAME}Application;
#end
#macro(importDomainRpcService)
import ${IMPORT_PACKAGE_MAP.get(${DOMAIN_ID}).get("${DOMAIN_CLASS_NAME}RpcService")}.${DOMAIN_CLASS_NAME}RpcService;
#end
#macro(importDomainQueryExe)
#foreach ($query in ${DOMAIN_QUERY_LIST})
import ${IMPORT_PACKAGE_MAP.get(${query.identity}).get("${query.name}Exe")}.${query.name}Exe;
#end
#end
#macro(importDomainCmdDTO2CmdConvert)
#foreach ($cmd in ${DOMAIN_CMD_LIST})
import ${IMPORT_PACKAGE_MAP.get(${cmd.identity}).get("${cmd.cmdDTOName}2${cmd.name}Convert")}.${cmd.cmdDTOName}2${cmd.name}Convert;
#end
#end
#macro(importDomainCmdHandler)
#foreach ($cmd in ${DOMAIN_CMD_LIST})
import ${IMPORT_PACKAGE_MAP.get(${cmd.identity}).get("${cmd.name}Handler")}.${cmd.name}Handler;
#end
#end
#macro(importDomainAggregation)
#foreach($aggregation in ${DOMAIN_AGGREGATION_LIST})
import ${IMPORT_PACKAGE_MAP.get(${aggregation.root.identity}).get("${aggregation.root.name}")}.${aggregation.name};
#end
#end
#macro(importDomainAggregationRepository)
#foreach($aggregation in ${DOMAIN_AGGREGATION_LIST})
import ${IMPORT_PACKAGE_MAP.get(${aggregation.root.identity}).get("${aggregation.root.name}Repository")}.${aggregation.name}Repository;
#end
#end
#macro(importDataObjectMapper)
#foreach($dataobject in ${DOMAIN_DATA_LIST})
import ${IMPORT_PACKAGE_MAP.get(${dataobject.identity}).get("${dataobject.dataObjectMapperName}")}.${dataobject.dataObjectMapperName};
#end
#end
#macro(importDTO2DOConvert)
#foreach ($query in ${DOMAIN_QUERY_LIST})
#set($returnTypeId = ${PARSE_TYPE_UTIL.getFirstId(${query.returnInfo.type})})
#set($returnTypeClassName = ${IMPORT_PACKAGE_MAP.get(${returnTypeId}).elementNode.name})
#set($doId = ${IMPORT_PACKAGE_MAP.get("mapper::dto::${returnTypeId}")})
#set($doClassName = ${IMPORT_PACKAGE_MAP.get(${doId}).elementNode.name})
#set($convertClassName = "${returnTypeClassName}2${doClassName}Convert")
#foreach($objectMapper in ${DOMAIN_OBJECT_MAPPER_LIST})
#if(${objectMapper.source.id} == ${returnTypeId} && ${objectMapper.target.id} == ${doId})
#set($objectMapperId = ${objectMapper.identity})
#end
#end
import ${IMPORT_PACKAGE_MAP.get(${objectMapperId}).get(${convertClassName})}.${convertClassName};
#end
#end
#macro(importQueryResultDO)
#foreach ($query in ${DOMAIN_QUERY_LIST})
#set($returnTypeId = ${PARSE_TYPE_UTIL.getFirstId(${query.returnInfo.type})})
#set($doId = ${IMPORT_PACKAGE_MAP.get("mapper::dto::${returnTypeId}")})
#set($doClassName = ${IMPORT_PACKAGE_MAP.get(${doId}).elementNode.name})
import ${IMPORT_PACKAGE_MAP.get(${doId}).get(${doClassName})}.${doClassName};
#end
#end