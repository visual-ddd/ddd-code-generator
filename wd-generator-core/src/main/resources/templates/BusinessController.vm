#parse("templates/ClassFunction.vm")
#macro(businessControllerImport)
import java.util.List;
import javax.annotation.Resource;

import com.wakedata.common.core.dto.PageResultDTO;
import com.wakedata.common.core.dto.ResultDTO;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestBody;
import javax.validation.Valid;
#foreach ($query in ${BUSINESS_QUERY_LIST})
import ${IMPORT_PACKAGE_MAP.get(${query.identity}).get("${query.name}")}.${query.name};
#end
#foreach ($dto in ${BUSINESS_DTO_LIST})
import ${IMPORT_PACKAGE_MAP.get(${dto.identity}).get("${dto.name}")}.${dto.name};
#end
import ${IMPORT_PACKAGE_MAP.get(${BUSINESS_ID}).get("${BUSINESS_CLASS_NAME}RpcService")}.${BUSINESS_CLASS_NAME}RpcService;
#end
#macro(businessController)

    @Resource
    private ${BUSINESS_CLASS_NAME}RpcService ${CASE_FORMAT_LOWER_CAMEL.convert(${BUSINESS_CLASS_NAME})}RpcService;
#foreach ($query in ${BUSINESS_QUERY_LIST})

    @ApiOperation("${query.description}")
    @PostMapping("/${CASE_FORMAT_LOWER_HYPHEN.convert(${query.name})}")
#if(${query.pagination})
    public PageResultDTO<List<${PARSE_TYPE_UTIL.parse(${query.returnInfo.type})}>> ${CASE_FORMAT_LOWER_CAMEL.convert(${query.name})}(@RequestBody @Valid ${query.name} request) {
        return ${CASE_FORMAT_LOWER_CAMEL.convert(${BUSINESS_CLASS_NAME})}RpcService.${CASE_FORMAT_LOWER_CAMEL.convert(${query.name})}(request);
    }
#end
#if(!${query.pagination})
    public ResultDTO<${PARSE_TYPE_UTIL.parse(${query.returnInfo.type})}> ${CASE_FORMAT_LOWER_CAMEL.convert(${query.name})}(@RequestBody @Valid ${query.name} request) {
        return ${CASE_FORMAT_LOWER_CAMEL.convert(${BUSINESS_CLASS_NAME})}RpcService.${CASE_FORMAT_LOWER_CAMEL.convert(${query.name})}(request);
    }
#end
#end
#end